// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.


// Convert pixel units to rems, assuming a 16px base size
// Usage:
//    remify(24px)

@function remify($pixels) {
    $rems: $pixels / 16px;
    @return #{$rems}rem;
}


// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// Usage:
//    str-replace($string, ' ', '-')

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


// Collect multiple maps into one big map.
// Sass' native map-merge() function only takes two maps. This function
// gets over that limitation by looping through numerous maps and merging
// them one at a time.
// Usage:
//    $mega-map: map-collect($map-1, $map-2, $map-3)

@function map-collect($maps...) {
  $collection: ();

  @each $map in $maps {
    $collection: map-merge($collection, $map);
  }

  @return $collection;
}


// Get a type scale value from the scale map
// Usage:
//    type-scale('scale-value');
//
// Size values are define in pixels. Use the font-size() mixin
// to convert to rem with px fallback. Example:
//    @include font-size(type-scale('title-xl-size'));
//
// An alternative, condensed type scale is defined in a separate
// map. When the $type-scale variable is set to 'condensed' this
// function will draw its values from that alternative map.

@function type-scale($scale) {
  @if not $scale {
    @return false;
  }

  // Default to Firefox brand scale
  $scale-map: $theme-type-scale-firefox;

  // Firefox condensed
  @if $type-scale == 'condensed' {
    $scale-map: $theme-type-scale-condensed-firefox;
  }

  // Switch to Mozilla brand scale
  @if $brand-theme == 'mozilla' {
    $scale-map: $theme-type-scale-mozilla;
  }

  // Mozilla condensed
  @if $brand-theme == 'mozilla' and $type-scale == 'condensed' {
    $scale-map: $theme-type-scale-condensed-mozilla;
  }

  @if not map-has-key($scale-map, $scale) {
    @error '`#{$scale}` is not a valid type scale token. '
      + 'Valid tokens: #{map-keys($scale-map)}';
  }

  @return map-get($scale-map, $scale);
}


// Get a theme variable from the collected map.
// This swaps the map based on the value of $brand-theme.
// Theme maps are defined in includes/_theme.scss

@function get-theme($var) {
  @if not $var {
    @return false;
  }

  // Default to Firefox theme
  $theme-map: $theme-firefox;

  // Switch to Mozilla theme
  @if $brand-theme == 'mozilla' {
    $theme-map: $theme-mozilla;
  }

  @if not map-has-key($theme-map, $var) {
    @error '`#{$var}` is not a valid theme token. '
      + 'Valid tokens: #{map-keys($theme-map)}';
  }

  @return map-get($theme-map, $var);
}




