// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

@use 'sass:math';
@use 'sass:string';
@use 'sass:map';
@use 'lib';
@use 'mixins/images';
@use 'themes';

// Convert pixel units to rems, assuming a 16px base size
// Usage:
//    remify(24px)

@function remify($pixels) {
    $rems: math.div($pixels, 16px);

    @return #{$rems}rem;
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// Usage:
//    str-replace($string, ' ', '-')

@function str-replace($string, $search, $replace: '') {
    $index: string.index($string, $search);

    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + images.str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
    }

    @return $string;
}

// Collect multiple maps into one big map.
// Sass' native map-merge() function only takes two maps. This function
// gets over that limitation by looping through numerous maps and merging
// them one at a time.
// Usage:
//    $mega-map: map-collect($map-1, $map-2, $map-3)

@function map-collect($maps...) {
    $collection: ();

    @each $map in $maps {
        $collection: map.merge($collection, $map);
    }

    @return $collection;
}

// Get a type scale value from the scale map
// Usage:
//    type-scale('scale-value');
// Size values are define in pixels. Use the font-size() mixin
// to convert to rem with px fallback. Example:
//    @include font-size(type-scale('title-xl-size'));
// An alternative, condensed type scale is defined in a separate
// map. When the $type-scale variable is set to 'condensed' this
// function will draw its values from that alternative map.

@function type-scale($scale) {
    // Default to Firefox brand scale
    $scale-map: themes.$theme-type-scale-firefox;

    // Firefox condensed
    @if lib.$type-scale == 'condensed' {
        $scale-map: themes.$theme-type-scale-condensed-firefox;
    }

    // Switch to Mozilla brand scale
    @if lib.$brand-theme == 'mozilla' {
        $scale-map: themes.$theme-type-scale-mozilla;
    }

    // Mozilla condensed
    @if lib.$brand-theme == 'mozilla' and lib.$type-scale == 'condensed' {
        $scale-map: themes.$theme-type-scale-condensed-mozilla;
    }

    @if not map.has-key($scale-map, $scale) {
        @error '`#{$scale}` is not a valid type scale variable name. ' + 'Valid variable names: #{map.keys($scale-map)}';
    }

    @return map.get($scale-map, $scale);
}

// Get a theme variable from the collected map.
// This swaps the map based on the value of $brand-theme.
// Theme maps are defined in includes/_theme.scss

@function get-theme($var) {
    // Default to Firefox theme
    $theme-map: themes.$theme-firefox;

    // Switch to Mozilla theme
    @if lib.$brand-theme == 'mozilla' {
        $theme-map: themes.$theme-mozilla;
    }

    @if not map.has-key($theme-map, $var) {
        @error '`#{$var}` is not a valid theme variable. ' + 'Valid theme variable names: #{map.keys($theme-map)}';
    }

    @return map.get($theme-map, $var);
}
