// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

@use '../includes/lib' as *;

// * -------------------------------------------------------------------------- */
// Basic vertical alignment

.mzp-c-split {
    overflow-x: hidden;
    position: relative;

    // vertical spacing should match mzp-l-content's vertical spacing
    padding: $v-grid-xs 0;

    @media #{$mq-md} {
        padding: $v-grid-md 0;

        &.mzp-t-split-nospace {
            padding-top: 0;
            padding-bottom: 0;
        }
    }

    @media #{$mq-xl} {
        padding: var(--v-grid-xl) 0;
    }

    @supports (--css: variables) {
        padding: var(--v-grid-xs) 0;

        @media #{$mq-md} {
            padding: var(--v-grid-md) 0;
        }

        @media #{$mq-xl} {
            padding: var(--v-grid-xl) 0;
        }
    }
}

.mzp-c-split-container {
    @include clearfix;
    margin: 0 auto;
    max-width: $content-max;

    // horizontal spacing should match mzp-l-content's horizontal spacing
    padding: 0 $h-grid-xs;

    @media #{$mq-md} {
        padding: 0 $h-grid-md;
    }

    @media #{$mq-xl} {
        padding: 0 $h-grid-xl;
    }

    @supports (--css: variables) {
        padding: 0 var(--h-grid-xs);

        @media #{$mq-md} {
            padding: 0 var(--h-grid-md);
        }

        @media #{$mq-xl} {
            padding: 0 var(--h-grid-xl);
        }
    }

    .mzp-t-content-md & {
        max-width: $content-md;
    }

    .mzp-t-content-lg & {
        max-width: $content-lg;
    }

    .mzp-t-content-xl & {
        max-width: $content-xl;
    }
}

.mzp-c-split-body {
    position: relative;

    > :last-child {
        margin-bottom: 0;

        > :last-child {
            margin-bottom: 0;
        }
    }
}

.mzp-c-split-media {
    position: relative;
}

.mzp-c-split-media-asset {
    display: block;
    max-width: 100%;
}

.mzp-c-split-bg {
    // vertical spacing should match mzp-l-content's vertical spacing
    padding: $v-grid-xs 0;

    @media #{$mq-md} {
        padding: $v-grid-md 0;
    }

    @media #{$mq-xl} {
        padding: $v-grid-xl 0;
    }

    @supports (--css: variables) {
        padding: var(--v-grid-xs) 0;

        @media #{$mq-md} {
            padding: var(--v-grid-md) 0;
        }

        @media #{$mq-xl} {
            padding: var(--v-grid-xl) 0;
        }
    }
}

// * -------------------------------------------------------------------------- */
// Mobile only rules

@media all and (max-width: #{$screen-md - 1}) {
    .mzp-c-split-body + .mzp-c-split-media,
    .mzp-c-split-media + .mzp-c-split-body {
        margin-top: $v-grid-xs;

        @supports (--css: variables) {
            margin-top: var(--v-grid-xs);
        }
    }

    .mzp-l-split-center-on-sm-md {
        .mzp-c-split-body,
        .mzp-c-split-media,
        .mzp-c-split-media-asset {
            text-align: center;
            margin-left: auto;
            margin-right: auto;
        }
    }

    .mzp-l-split-hide-media-on-sm-md {
        .mzp-c-split-body {
            margin-top: 0;
        }

        .mzp-c-split-media {
            display: none;
        }
    }
}

// Issue 779 - Remove default mobile padding on nospace split component
@media screen and (max-width: $screen-md) {
    .mzp-t-split-nospace {
        padding-top: 0;
        padding-bottom: 0;
    }
}

// * -------------------------------------------------------------------------- */
// side by side layout, float based fall back

@media #{$mq-md} {
    .mzp-c-split-body {
        @include border-box;
        @include bidi(((float, left, right),));
        padding: 0 calc($h-grid-lg * 0.5);
        width: 50%;

        .mzp-l-split-reversed & {
            @include bidi(((float, right, left),));
        }
    }

    .mzp-c-split-media {
        @include border-box;
        @include bidi(((float, right, left),));
        padding: 0 ($h-grid-lg * 0.5);
        width: 50%;

        .mzp-l-split-reversed & {
            @include bidi(((float, left, right),));
        }
    }

    @supports (--css: variables) {
        .mzp-c-split-body {
            padding: 0 calc(var(--h-grid-lg) * 0.5);
        }

        .mzp-c-split-media {
            padding: 0 calc(var(--h-grid-lg) * 0.5);
        }
    }
}

@media #{$mq-lg} {
    .mzp-c-split-body {
        .mzp-l-split-body-narrow & {
            width: 33.33%;
        }

        .mzp-l-split-body-wide & {
            width: 66.66%;
        }
    }

    .mzp-c-split-media {
        .mzp-l-split-body-narrow & {
            width: 66.66%;
        }

        .mzp-l-split-body-wide & {
            width: 33.33%;
        }
    }
}

@media #{$mq-xl} {
    .mzp-c-split-body,
    .mzp-c-split-media {
        padding: 0 ($h-grid-xl * 0.5);

        @supports (--css: variables) {
            padding: 0 calc(var(--h-grid-lg) * 0.5);
        }
    }
}

// * -------------------------------------------------------------------------- */
// side by side layout, grid based

@supports (display:grid) {
    @media #{$mq-md} {
        .mzp-c-split-container {
            // grid is all start/end based we don't need bidi declarations for RTL support \o/
            align-items: center;
            display: grid;
            grid-column-gap: $h-grid-lg;
            grid-template-areas: 'body media';
            grid-template-columns: 1fr 1fr;

            .mzp-l-split-reversed & {
                grid-template-areas: 'media body';
            }

            @supports (--css: variables) {
                grid-column-gap: var(--h-grid-lg);
            }
        }

        .mzp-c-split-body,
        .mzp-c-split-media {
            .mzp-c-split-container & { // extra specificitly to over-ride the styles that make the float fall-back work
                float: none;
                min-width: 0; // because of https://stackoverflow.com/questions/43311943/prevent-content-from-expanding-grid-items
                padding: 0;
                width: 100%;
            }
        }

        .mzp-c-split-body {
            grid-area: body;
        }

        .mzp-c-split-media {
            align-self: center;
            grid-area: media;
            justify-self: start;

            .mzp-c-split-media-asset {
                display: block;
            }

            .mzp-l-split-reversed & {
                justify-self: end;
            }
        }
    }

    @media #{$mq-lg} {
        .mzp-c-split-container {
            .mzp-l-split-body-narrow & {
                grid-template-columns: 1fr 2fr;
            }

            .mzp-l-split-body-wide & {
                grid-template-columns: 2fr 1fr;
            }

            .mzp-l-split-body-narrow.mzp-l-split-reversed & {
                grid-template-columns: 2fr 1fr;
            }

            .mzp-l-split-body-wide.mzp-l-split-reversed & {
                grid-template-columns: 1fr 2fr;
            }
        }
    }

    @media #{$mq-xl} {
        .mzp-c-split-container {
            grid-column-gap: $h-grid-xl;

            @supports (--css: variables) {
                grid-column-gap: var(--h-grid-xl);
            }
        }
    }
}

// * -------------------------------------------------------------------------- */
// constraints on height or width of media

@supports (display:grid) {
    @media #{$mq-md} {
        .mzp-c-split-media {
            &.mzp-l-split-media-overflow {
                .mzp-c-split-media-asset {
                    max-width: none;

                    .mzp-l-split-reversed & {
                        @include bidi((
                            (float, right, left),
                        ));
                    }
                }
            }

            &.mzp-l-split-media-constrain-height {
                height: 100%;
                justify-self: auto !important; /* stylelint-disable-line declaration-no-important */

                .mzp-c-split-media-asset {
                    @include bidi(((left, 0, right, auto),));
                    bottom: 0;
                    max-height: 100%;
                    max-width: none;
                    position: absolute;
                    top: 50%;
                    transform: translateY(-50%);
                    width: auto;

                    .mzp-l-split-reversed & {
                        @include bidi((
                            (left, auto, right, 0),
                            (right, 0, left, auto),
                        ));
                    }
                }
            }
        }
    }
}

// * --------------------------------------------------------------------------- */
// vertical spacing for body or media

@supports (display:grid) {
    @media #{$mq-md} {
        .mzp-l-split-pop-top,
        .mzp-l-split-pop {
            &.mzp-c-split {
                padding-top: $v-grid-lg * 2;

                @supports (--css: variables) {
                    padding-top: calc(var(--v-grid-lg) * 2);
                }
            }

            .mzp-c-split-media {
                margin-top: $v-grid-lg * -1;

                @supports (--css: variables) {
                    margin-top: calc(var(--v-grid-lg) * -1);
                }
            }

            .mzp-c-split-bg & {
                .mzp-c-split-media {
                    margin-top: $v-grid-lg * -2;

                    @supports (--css: variables) {
                        margin-top: calc(var(--v-grid-lg) * -2);
                    }
                }
            }
        }

        .mzp-l-split-pop-bottom,
        .mzp-l-split-pop {
            &.mzp-c-split {
                padding-bottom: $v-grid-lg * 2;

                @supports (--css: variables) {
                    padding-bottom: calc(var(--v-grid-lg) * 2);
                }
            }

            .mzp-c-split-media {
                margin-bottom: $v-grid-lg * -1;

                @supports (--css: variables) {
                    margin-bottom: calc(var(--v-grid-lg) * -1);
                }
            }

            .mzp-c-split-bg & {
                .mzp-c-split-media {
                    margin-bottom: $v-grid-lg * -2;

                    @supports (--css: variables) {
                        margin-bottom: calc(var(--v-grid-lg) * -2);
                    }
                }
            }
        }

        .mzp-l-split-media-constrain-height {
            .mzp-l-split-pop-top &,
            .mzp-l-split-pop-bottom & {
                height: calc(100% + #{$v-grid-lg});

                @supports (--css: variables) {
                    height: calc(100% + var(--v-grid-lg));
                }
            }

            .mzp-l-split-pop & {
                height: calc(100% + #{$v-grid-lg * 2});

                @supports (--css: variables) {
                    height: calc(100% + var(--v-grid-lg) * 2);
                }
            }

            .mzp-l-split-pop-top .mzp-c-split-bg &,
            .mzp-l-split-pop-bottom .mzp-c-split-bg & {
                height: calc(100% + #{$v-grid-lg * 2});

                @supports (--css: variables) {
                    height: calc(100% + var(--v-grid-lg) * 2);
                }
            }

            .mzp-l-split-pop .mzp-c-split-bg & {
                height: calc(100% + #{$v-grid-lg * 4});

                @supports (--css: variables) {
                    height: calc(100% + var(--v-grid-lg) * 4);
                }
            }
        }
    }

    @media #{$mq-xl} {
        .mzp-l-split-pop-top,
        .mzp-l-split-pop {
            &.mzp-c-split {
                padding-top: $v-grid-xl * 2;

                @supports (--css: variables) {
                    padding-top: calc(var(--v-grid-xl) * 2);
                }
            }

            .mzp-c-split-media {
                margin-top: $v-grid-xl * -1;

                @supports (--css: variables) {
                    margin-top: calc(var(--v-grid-xl) * -1);
                }
            }

            & .mzp-c-split-bg {
                .mzp-c-split-media {
                    margin-top: $v-grid-xl * -2;

                    @supports (--css: variables) {
                        margin-top: calc(var(--v-grid-xl) * -2);
                    }
                }
            }
        }

        .mzp-l-split-pop-bottom,
        .mzp-l-split-pop {
            &.mzp-c-split {
                padding-bottom: $v-grid-xl * 2;

                @supports (--css: variables) {
                    padding-bottom: calc(var(--v-grid-xl) * 2);
                }
            }

            .mzp-c-split-media {
                margin-bottom: $v-grid-xl * -1;

                @supports (--css: variables) {
                    margin-bottom: calc(var(--v-grid-xl) * -1);
                }
            }

            & .mzp-c-split-bg {
                .mzp-c-split-media {
                    margin-bottom: $v-grid-xl * -2;

                    @supports (--css: variables) {
                        margin-bottom: calc(var(--v-grid-xl) * -2);
                    }
                }
            }
        }

        .mzp-l-split-media-constrain-height {
            .mzp-l-split-pop-top &,
            .mzp-l-split-pop-bottom & {
                height: calc(100% + #{$v-grid-xl});

                @supports (--css: variables) {
                    height: calc(100% + var(--v-grid-xl));
                }
            }

            .mzp-l-split-pop & {
                height: calc(100% + #{$v-grid-xl * 2});

                @supports (--css: variables) {
                    height: calc(100% + calc(var(--v-grid-xl) * 2));
                }
            }

            .mzp-l-split-pop-top .mzp-c-split-bg &,
            .mzp-l-split-pop-bottom .mzp-c-split-bg & {
                height: calc(100% + #{$v-grid-xl * 2});

                @supports (--css: variables) {
                    height: calc(100% + calc(var(--v-grid-xl) * 2));
                }
            }

            .mzp-l-split-pop .mzp-c-split-bg & {
                height: calc(100% + #{$v-grid-xl * 4});

                @supports (--css: variables) {
                    height: calc(100% + calc(var(--v-grid-xl) * 4));
                }
            }
        }
    }
}

// * --------------------------------------------------------------------------- */
// vertical and horizontal aligment for body or media

@media #{$mq-md} {
    .mzp-c-split {
        // horizontal alignment works with float fallbacks.
        // horizontal alignment does not apply to constrain-height or overflow because it could expand and obscure the text
        // there's an !important in the contrain-height definitions to enforce this
        .mzp-l-split-h-start {
            @include bidi(((text-align, left, right),));
            justify-self: start;
        }

        .mzp-l-split-h-center:not([class*='mzp-l-split-media-']) {
            justify-self: center;
            text-align: center;

            .mzp-c-split-media-asset {
                margin: 0 auto;
            }
        }

        .mzp-l-split-h-end:not([class*='mzp-l-split-media-']) {
            @include bidi(((text-align, right, left),));
            justify-self: end;

            .mzp-c-split-media-asset {
                @include bidi((
                    (margin-left, auto, margin-right, 0),
                    (margin-right, 0, margin-left, 0),
                ));
            }
        }

        // vertical alignment relies on grid so don't work for float fallbacks
        .mzp-l-split-v-start {
            align-self: start;

            &.mzp-l-split-media-constrain-height .mzp-c-split-media-asset {
                bottom: 0;
                top: 0;
                transform: none;
            }
        }

        .mzp-l-split-v-center {
            align-self: center;
        }

        .mzp-l-split-v-end {
            align-self: end;

            &.mzp-l-split-media-constrain-height .mzp-c-split-media-asset {
                top: auto;
                transform: none;
            }
        }
    }
}
